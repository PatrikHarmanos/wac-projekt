/* tslint:disable */
/* eslint-disable */
/**
 * Device List Api
 * Ambulance Device List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: <your_email>
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Department of the hospital
 * @export
 * @interface Department
 */
export interface Department {
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface DeviceListEntry
 */
export interface DeviceListEntry {
    /**
     * Unique id of the entry in this waiting list
     * @type {string}
     * @memberof DeviceListEntry
     */
    'id': string;
    /**
     * Name of patient in waiting list
     * @type {string}
     * @memberof DeviceListEntry
     */
    'name': string;
    /**
     * Unique identifier of the patient known to Web-In-Cloud system
     * @type {string}
     * @memberof DeviceListEntry
     */
    'deviceId': string;
    /**
     * Timestamp since when the patient entered the waiting list
     * @type {string}
     * @memberof DeviceListEntry
     */
    'warrantyUntil'?: string;
    /**
     * Price of device
     * @type {number}
     * @memberof DeviceListEntry
     */
    'price'?: number;
    /**
     * 
     * @type {Department}
     * @memberof DeviceListEntry
     */
    'department'?: Department;
}
/**
 * 
 * @export
 * @interface DeviceLog
 */
export interface DeviceLog {
    /**
     * Unique id of the log
     * @type {string}
     * @memberof DeviceLog
     */
    'id': string;
    /**
     * Text of log operation
     * @type {string}
     * @memberof DeviceLog
     */
    'text': string;
    /**
     * Unique identifier of the device
     * @type {string}
     * @memberof DeviceLog
     */
    'deviceId': string;
    /**
     * Timestamp since when the patient entered the waiting list
     * @type {string}
     * @memberof DeviceLog
     */
    'createdAt'?: string;
}

/**
 * AmbulanceDeviceListApi - axios parameter creator
 * @export
 */
export const AmbulanceDeviceListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this method to store new entry into the device list.
         * @summary Saves new entry into device list
         * @param {DeviceListEntry} deviceListEntry Device list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceListEntry: async (deviceListEntry: DeviceListEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceListEntry' is not null or undefined
            assertParamExists('createDeviceListEntry', 'deviceListEntry', deviceListEntry)
            const localVarPath = `/device-list/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceListEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to delete the specific entry from the device list.
         * @summary Deletes specific entry
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceListEntry: async (entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('deleteDeviceListEntry', 'entryId', entryId)
            const localVarPath = `/device-list/entries/{entryId}`
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of devices in ambulance
         * @summary Provides the ambulance device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceListEntries: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/device-list/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using entryId you get details of particular device
         * @summary Provides details about device list entry
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceListEntry: async (entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('getDeviceListEntry', 'entryId', entryId)
            const localVarPath = `/device-list/entries/{entryId}`
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this method to update content of the device list entry.
         * @summary Updates specific entry
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {DeviceListEntry} deviceListEntry Device list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceListEntry: async (entryId: string, deviceListEntry: DeviceListEntry, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('updateDeviceListEntry', 'entryId', entryId)
            // verify required parameter 'deviceListEntry' is not null or undefined
            assertParamExists('updateDeviceListEntry', 'deviceListEntry', deviceListEntry)
            const localVarPath = `/device-list/entries/{entryId}`
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceListEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceDeviceListApi - functional programming interface
 * @export
 */
export const AmbulanceDeviceListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceDeviceListApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this method to store new entry into the device list.
         * @summary Saves new entry into device list
         * @param {DeviceListEntry} deviceListEntry Device list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDeviceListEntry(deviceListEntry: DeviceListEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceListEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDeviceListEntry(deviceListEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to delete the specific entry from the device list.
         * @summary Deletes specific entry
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeviceListEntry(entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeviceListEntry(entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get list of devices in ambulance
         * @summary Provides the ambulance device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceListEntries(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceListEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceListEntries(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using entryId you get details of particular device
         * @summary Provides details about device list entry
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceListEntry(entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceListEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceListEntry(entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this method to update content of the device list entry.
         * @summary Updates specific entry
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {DeviceListEntry} deviceListEntry Device list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDeviceListEntry(entryId: string, deviceListEntry: DeviceListEntry, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceListEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDeviceListEntry(entryId, deviceListEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceDeviceListApi - factory interface
 * @export
 */
export const AmbulanceDeviceListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceDeviceListApiFp(configuration)
    return {
        /**
         * Use this method to store new entry into the device list.
         * @summary Saves new entry into device list
         * @param {DeviceListEntry} deviceListEntry Device list entry to store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceListEntry(deviceListEntry: DeviceListEntry, options?: any): AxiosPromise<DeviceListEntry> {
            return localVarFp.createDeviceListEntry(deviceListEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to delete the specific entry from the device list.
         * @summary Deletes specific entry
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceListEntry(entryId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDeviceListEntry(entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of devices in ambulance
         * @summary Provides the ambulance device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceListEntries(options?: any): AxiosPromise<Array<DeviceListEntry>> {
            return localVarFp.getDeviceListEntries(options).then((request) => request(axios, basePath));
        },
        /**
         * By using entryId you get details of particular device
         * @summary Provides details about device list entry
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceListEntry(entryId: string, options?: any): AxiosPromise<DeviceListEntry> {
            return localVarFp.getDeviceListEntry(entryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this method to update content of the device list entry.
         * @summary Updates specific entry
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {DeviceListEntry} deviceListEntry Device list entry to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceListEntry(entryId: string, deviceListEntry: DeviceListEntry, options?: any): AxiosPromise<DeviceListEntry> {
            return localVarFp.updateDeviceListEntry(entryId, deviceListEntry, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmbulanceDeviceListApi - interface
 * @export
 * @interface AmbulanceDeviceListApi
 */
export interface AmbulanceDeviceListApiInterface {
    /**
     * Use this method to store new entry into the device list.
     * @summary Saves new entry into device list
     * @param {DeviceListEntry} deviceListEntry Device list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceListApiInterface
     */
    createDeviceListEntry(deviceListEntry: DeviceListEntry, options?: AxiosRequestConfig): AxiosPromise<DeviceListEntry>;

    /**
     * Use this method to delete the specific entry from the device list.
     * @summary Deletes specific entry
     * @param {string} entryId pass the id of the particular entry in the device list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceListApiInterface
     */
    deleteDeviceListEntry(entryId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get list of devices in ambulance
     * @summary Provides the ambulance device list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceListApiInterface
     */
    getDeviceListEntries(options?: AxiosRequestConfig): AxiosPromise<Array<DeviceListEntry>>;

    /**
     * By using entryId you get details of particular device
     * @summary Provides details about device list entry
     * @param {string} entryId pass the id of the particular entry in the device list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceListApiInterface
     */
    getDeviceListEntry(entryId: string, options?: AxiosRequestConfig): AxiosPromise<DeviceListEntry>;

    /**
     * Use this method to update content of the device list entry.
     * @summary Updates specific entry
     * @param {string} entryId pass the id of the particular entry in the device list
     * @param {DeviceListEntry} deviceListEntry Device list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceListApiInterface
     */
    updateDeviceListEntry(entryId: string, deviceListEntry: DeviceListEntry, options?: AxiosRequestConfig): AxiosPromise<DeviceListEntry>;

}

/**
 * AmbulanceDeviceListApi - object-oriented interface
 * @export
 * @class AmbulanceDeviceListApi
 * @extends {BaseAPI}
 */
export class AmbulanceDeviceListApi extends BaseAPI implements AmbulanceDeviceListApiInterface {
    /**
     * Use this method to store new entry into the device list.
     * @summary Saves new entry into device list
     * @param {DeviceListEntry} deviceListEntry Device list entry to store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceListApi
     */
    public createDeviceListEntry(deviceListEntry: DeviceListEntry, options?: AxiosRequestConfig) {
        return AmbulanceDeviceListApiFp(this.configuration).createDeviceListEntry(deviceListEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to delete the specific entry from the device list.
     * @summary Deletes specific entry
     * @param {string} entryId pass the id of the particular entry in the device list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceListApi
     */
    public deleteDeviceListEntry(entryId: string, options?: AxiosRequestConfig) {
        return AmbulanceDeviceListApiFp(this.configuration).deleteDeviceListEntry(entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of devices in ambulance
     * @summary Provides the ambulance device list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceListApi
     */
    public getDeviceListEntries(options?: AxiosRequestConfig) {
        return AmbulanceDeviceListApiFp(this.configuration).getDeviceListEntries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using entryId you get details of particular device
     * @summary Provides details about device list entry
     * @param {string} entryId pass the id of the particular entry in the device list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceListApi
     */
    public getDeviceListEntry(entryId: string, options?: AxiosRequestConfig) {
        return AmbulanceDeviceListApiFp(this.configuration).getDeviceListEntry(entryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this method to update content of the device list entry.
     * @summary Updates specific entry
     * @param {string} entryId pass the id of the particular entry in the device list
     * @param {DeviceListEntry} deviceListEntry Device list entry to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceListApi
     */
    public updateDeviceListEntry(entryId: string, deviceListEntry: DeviceListEntry, options?: AxiosRequestConfig) {
        return AmbulanceDeviceListApiFp(this.configuration).updateDeviceListEntry(entryId, deviceListEntry, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AmbulanceDeviceLogListApi - axios parameter creator
 * @export
 */
export const AmbulanceDeviceLogListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * By using entryId you get logs of a particular device
         * @summary Provides device logs list
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceLogs: async (entryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entryId' is not null or undefined
            assertParamExists('getDeviceLogs', 'entryId', entryId)
            const localVarPath = `/device-list/entries/{entryId}/logs`
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AmbulanceDeviceLogListApi - functional programming interface
 * @export
 */
export const AmbulanceDeviceLogListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AmbulanceDeviceLogListApiAxiosParamCreator(configuration)
    return {
        /**
         * By using entryId you get logs of a particular device
         * @summary Provides device logs list
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceLogs(entryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceLog>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceLogs(entryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AmbulanceDeviceLogListApi - factory interface
 * @export
 */
export const AmbulanceDeviceLogListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AmbulanceDeviceLogListApiFp(configuration)
    return {
        /**
         * By using entryId you get logs of a particular device
         * @summary Provides device logs list
         * @param {string} entryId pass the id of the particular entry in the device list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceLogs(entryId: string, options?: any): AxiosPromise<Array<DeviceLog>> {
            return localVarFp.getDeviceLogs(entryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AmbulanceDeviceLogListApi - interface
 * @export
 * @interface AmbulanceDeviceLogListApi
 */
export interface AmbulanceDeviceLogListApiInterface {
    /**
     * By using entryId you get logs of a particular device
     * @summary Provides device logs list
     * @param {string} entryId pass the id of the particular entry in the device list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceLogListApiInterface
     */
    getDeviceLogs(entryId: string, options?: AxiosRequestConfig): AxiosPromise<Array<DeviceLog>>;

}

/**
 * AmbulanceDeviceLogListApi - object-oriented interface
 * @export
 * @class AmbulanceDeviceLogListApi
 * @extends {BaseAPI}
 */
export class AmbulanceDeviceLogListApi extends BaseAPI implements AmbulanceDeviceLogListApiInterface {
    /**
     * By using entryId you get logs of a particular device
     * @summary Provides device logs list
     * @param {string} entryId pass the id of the particular entry in the device list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AmbulanceDeviceLogListApi
     */
    public getDeviceLogs(entryId: string, options?: AxiosRequestConfig) {
        return AmbulanceDeviceLogListApiFp(this.configuration).getDeviceLogs(entryId, options).then((request) => request(this.axios, this.basePath));
    }
}


